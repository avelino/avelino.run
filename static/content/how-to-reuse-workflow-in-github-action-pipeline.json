{
  "title" : "How to reuse workflow in GitHub Action pipeline",
  "date" : "2023-04-27T00:00:00+00:00",
  "tags" : [ ],
  "url" : "https://avelino.run/how-to-reuse-workflow-in-github-action-pipeline",
  "content" : "Before I tell you how to do it, I will describe the problem I needed to solve and why I believed that reuse would be the best option to reduce duplicate code.\n\nI maintain an Open Source project called moclojer written in Clojure and we use GraalVM Native Imagem to distribute the software in binary format (with everything self-contained).\nThe configuration of native-image receives several parameters, some refer to libraries used in the project code and it depends on a .jar file, so there are some steps before running the command that generates the binary.\n\nSteps to generate the moclojer binary:\n\n1. generate the .jar file\n2. generate the configuration file reflect.config.json from the .jar.\n3. generate the binary using .jar and reflect.config.json\n4. test if the binary is working correctly - run the software\n5. upload artifact (file) to generate software release on GitHub\n\nIn moclojer I needed to run the pipeline that creates the .jar in every push and pull request, we had the same duplicate code in this pipeline and in the pipeline to generate the binary (Graalvm Native Image).\n\nWhen opening pull request  I don't need to generate the binary every time just once when everything is right with the contribution, but every push  I want to generate the .jar to validate that everything is working.\n\nHow to reuse the workflow in GitHub Action pipeline?\n\nNow that we are clear on the need, let's get to the point of how to do it.\n\nIn a job you have the parameter jobs.<job-name>.uses which accepts .yml file (another workflow), when it reaches this step it will call the external workflow and wait for the output, example:\n\n``yaml\njobs:\n  call-build:\n    uses: moclojer/moclojer/.github/workflows/build-native-image.yml@main\n`\n\nIn the example above I pass the path of the workflow build-native-image.yml which is in the GitHub organization moclojer (first parameter), in the repository moclojer (second parameter) and in the branch main (comes after the name of the file .yml starting with @).\n\n<github-org-OR-profile>/<repo-name>/.github/workflows/<workflow-file-name>@<branch-or-tag>`\n\nIf the workflow being invoked depends on any permissions, the main workflow needs to have the same permissions.\n\nSee the workflow we used for release from moclojer.\n\n> Learn more about workflow reuse in the official GitHub documentation.",
  "type" : "blog",
  "file-path" : "content/blog/2023-04-23-how-to-reuse-workflow-in-github-action-pipeline.md"
}